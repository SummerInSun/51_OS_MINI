; .\core.SRC generated from: ..\src\core.c
; COMPILER INVOKED BY:
;        D:\msprograms\keil4\C51\BIN\C51.EXE ..\src\core.c OPTIMIZE(2,SPEED) BROWSE INCDIR(../head) DEBUG OBJECTEXTEND PRINT(.\core.lst) SRC(.\core.SRC)

$NOMOD51

NAME	CORE

CCF2	BIT	0D8H.2
P1M0	DATA	092H
P0M1	DATA	093H
P2M0	DATA	096H
P1M1	DATA	091H
P0	DATA	080H
P3M0	DATA	0B2H
P2M1	DATA	095H
P1	DATA	090H
P4M0	DATA	0B4H
P3M1	DATA	0B1H
P2	DATA	0A0H
WKTCH	DATA	0ABH
P5M0	DATA	0CAH
P4M1	DATA	0B3H
P3	DATA	0B0H
P6M0	DATA	0CCH
P5M1	DATA	0C9H
P4	DATA	0C0H
AC	BIT	0D0H.6
PWMIF	DATA	0F6H
P7M0	DATA	0E2H
P6M1	DATA	0CBH
P5	DATA	0C8H
EA	BIT	0A8H.7
P7M1	DATA	0E1H
P6	DATA	0E8H
WKTCL	DATA	0AAH
P7	DATA	0F8H
SPCTL	DATA	0CEH
CF	BIT	0D8H.7
PWMCR	DATA	0F5H
CH	DATA	0F9H
P_SW1	DATA	0A2H
P_SW2	DATA	0BAH
EADC	BIT	0A8H.5
IE	DATA	0A8H
CL	DATA	0E9H
IAP_CMD	DATA	0C5H
CCAP0H	DATA	0FAH
CCAP1H	DATA	0FBH
CCAP2H	DATA	0FCH
ADC_RES	DATA	0BDH
CCAP0L	DATA	0EAH
CR	BIT	0D8H.6
PWMFDCR	DATA	0F7H
CCAP1L	DATA	0EBH
CCAPM0	DATA	0DAH
CCAP2L	DATA	0ECH
CCAPM1	DATA	0DBH
CCAPM2	DATA	0DCH
ES	BIT	0A8H.4
PADC	BIT	0B8H.5
IP	DATA	0B8H
RI	BIT	098H.0
CY	BIT	0D0H.7
TI	BIT	098H.1
CLK_DIV	DATA	097H
IAP_ADDRH	DATA	0C3H
PS	BIT	0B8H.4
SP	DATA	081H
CMOD	DATA	0D9H
CCON	DATA	0D8H
IAP_ADDRL	DATA	0C4H
PPCA	BIT	0B8H.7
OV	BIT	0D0H.2
CMPCR1	DATA	0E6H
CMPCR2	DATA	0E7H
ELVD	BIT	0A8H.6
P00	BIT	080H.0
ADC_CONTR	DATA	0BCH
SBUF	DATA	099H
PCON	DATA	087H
P10	BIT	090H.0
P01	BIT	080H.1
P20	BIT	0A0H.0
P11	BIT	090H.1
P02	BIT	080H.2
P30	BIT	0B0H.0
P21	BIT	0A0H.1
P12	BIT	090H.2
P03	BIT	080H.3
SCON	DATA	098H
P40	BIT	0C0H.0
P31	BIT	0B0H.1
P22	BIT	0A0H.2
P13	BIT	090H.3
P04	BIT	080H.4
TMOD	DATA	089H
TCON	DATA	088H
P50	BIT	0C8H.0
P41	BIT	0C0H.1
P32	BIT	0B0H.2
P23	BIT	0A0H.3
P14	BIT	090H.4
P05	BIT	080H.5
P60	BIT	0E8H.0
P51	BIT	0C8H.1
P42	BIT	0C0H.2
P33	BIT	0B0H.3
P24	BIT	0A0H.4
P15	BIT	090H.5
P06	BIT	080H.6
PLVD	BIT	0B8H.6
P70	BIT	0F8H.0
P61	BIT	0E8H.1
P52	BIT	0C8H.2
P43	BIT	0C0H.3
P34	BIT	0B0H.4
P25	BIT	0A0H.5
P16	BIT	090H.6
P07	BIT	080H.7
P71	BIT	0F8H.1
P62	BIT	0E8H.2
P53	BIT	0C8H.3
P44	BIT	0C0H.4
P35	BIT	0B0H.5
P26	BIT	0A0H.6
P17	BIT	090H.7
P72	BIT	0F8H.2
P63	BIT	0E8H.3
P54	BIT	0C8H.4
P45	BIT	0C0H.5
P36	BIT	0B0H.6
P27	BIT	0A0H.7
P73	BIT	0F8H.3
P64	BIT	0E8H.4
P55	BIT	0C8H.5
P46	BIT	0C0H.6
P37	BIT	0B0H.7
P74	BIT	0F8H.4
P65	BIT	0E8H.5
P56	BIT	0C8H.6
P47	BIT	0C0H.7
P75	BIT	0F8H.5
P66	BIT	0E8H.6
P57	BIT	0C8H.7
P76	BIT	0F8H.6
P67	BIT	0E8H.7
IE0	BIT	088H.1
BUS_SPEED	DATA	0A1H
P77	BIT	0F8H.7
IE1	BIT	088H.3
IE2	DATA	0AFH
AUXR	DATA	08EH
B	DATA	0F0H
IAP_CONTR	DATA	0C7H
PWMCFG	DATA	0F1H
ACC	DATA	0E0H
ET0	BIT	0A8H.1
TF0	BIT	088H.5
ET1	BIT	0A8H.3
TF1	BIT	088H.7
IP2	DATA	0B5H
RB8	BIT	098H.2
TH0	DATA	08CH
TH1	DATA	08DH
IT0	BIT	088H.0
EX0	BIT	0A8H.0
TB8	BIT	098H.3
T2H	DATA	0D6H
IT1	BIT	088H.2
EX1	BIT	0A8H.2
T3H	DATA	0D4H
P	BIT	0D0H.0
SM0	BIT	098H.7
T4H	DATA	0D2H
TL0	DATA	08AH
SM1	BIT	098H.6
TL1	DATA	08BH
SM2	BIT	098H.5
T2L	DATA	0D7H
T3L	DATA	0D5H
T4L	DATA	0D3H
PT0	BIT	0B8H.1
PT1	BIT	0B8H.3
RS0	BIT	0D0H.3
IAP_DATA	DATA	0C2H
TR0	BIT	088H.4
RS1	BIT	0D0H.4
TR1	BIT	088H.6
WDT_CONTR	DATA	0C1H
PX0	BIT	0B8H.0
PX1	BIT	0B8H.2
PCA_PWM0	DATA	0F2H
PCA_PWM1	DATA	0F3H
PCA_PWM2	DATA	0F4H
P1ASF	DATA	09DH
DPH	DATA	083H
T3T4M	DATA	0D1H
T4T3M	DATA	0D1H
ADC_RESL	DATA	0BEH
DPL	DATA	082H
SPSTAT	DATA	0CDH
S2BUF	DATA	09BH
S3BUF	DATA	0ADH
S4BUF	DATA	085H
REN	BIT	098H.4
S2CON	DATA	09AH
S3CON	DATA	0ACH
S4CON	DATA	084H
SADEN	DATA	0B9H
SADDR	DATA	0A9H
IAP_TRIG	DATA	0C6H
AUXR1	DATA	0A2H
F0	BIT	0D0H.5
INT_CLKO	DATA	08FH
PSW	DATA	0D0H
CCF0	BIT	0D8H.0
CCF1	BIT	0D8H.1
SPDAT	DATA	0CFH
P0M0	DATA	094H
?PR?OS_init?CORE     SEGMENT CODE 
?PR?OS_start?CORE    SEGMENT CODE 
?PR?task_switch?CORE SEGMENT CODE 
?PR?_task_create?CORE                    SEGMENT CODE 
?DT?CORE             SEGMENT DATA 
?DT?_task_create?CORE                    SEGMENT DATA OVERLAYABLE 
?PR?timer1_task_switch?CORE              SEGMENT CODE 
?DT?timer1_task_switch?CORE              SEGMENT DATA OVERLAYABLE 
?PR?sp_test?CORE     SEGMENT CODE 
?C_INITSEG           SEGMENT CODE 
?XD?CORE             SEGMENT XDATA 
?BI?CORE             SEGMENT BIT 
?ID?CORE             SEGMENT IDATA 
	EXTRN	CODE (?C?LSTKXDATA)
	EXTRN	CODE (?C?LSTXDATA)
	PUBLIC	task_sp
	PUBLIC	task_pcb_buf
	PUBLIC	task_run_flag
	PUBLIC	task_start_flag
	PUBLIC	current_id
	PUBLIC	task_runtime
	PUBLIC	sp_test
	PUBLIC	timer1_task_switch
	PUBLIC	_task_create
	PUBLIC	task_switch
	PUBLIC	OS_start
	PUBLIC	OS_init

	RSEG  ?DT?_task_create?CORE
?_task_create?BYTE:
   priority?340:   DS   1
	ORG  1
task_address?341:   DS   2
	ORG  3
   task_msg?342:   DS   1

	RSEG  ?DT?CORE
          i?343:   DS   1

	RSEG  ?DT?CORE
 stack_deep?344:   DS   1

	RSEG  ?DT?CORE
    stack_p?345:   DS   1

	RSEG  ?DT?timer1_task_switch?CORE
?timer1_task_switch?BYTE:
       temp?446:   DS   1

	RSEG  ?XD?CORE
   task_runtime:   DS   4
     current_id:   DS   1
  task_run_flag:   DS   4
   task_pcb_buf:   DS   45

	RSEG  ?BI?CORE
task_start_flag:   DBIT   1

	RSEG  ?ID?CORE
        task_sp:   DS   100

	RSEG  ?C_INITSEG
	DB	041H
	DW	current_id
	DB	000H

	DB	044H
	DW	task_run_flag
	DB	000H,000H,000H,000H	; long

	DB	044H
	DW	task_runtime
	DB	000H,000H,000H,000H	; long

	DB	0C1H, task_start_flag + 000H	; bit-init

	DB	001H
	DB	i?343
	DB	000H

	DB	001H
	DB	stack_deep?344
	DB	000H

; #include "core.h"
; 
; /* 申请任务控制模块结构体数组，存储所有任务的控制结构体 */
; xdata struct task_pcb task_pcb_buf[TASK_MAX];
; /* 任务堆栈数组 */
; unsigned char idata task_sp[TASK_MAX][SP_DEEP];
; /* 正在运行任务的id，初始化为0，默认最开始运行0号任务 */
; xdata unsigned char current_id = 0;
; /* 任务运行标志，值反映了有多少任务正在运行 */
; xdata unsigned long task_run_flag = 0;
; /* 从开机到现在任务运行时间，单位10ms */
; xdata unsigned long task_runtime = 0;
; /* 设置系统运行标志，1为正在运行，0为未开始运行。初始化为0 */
; bit task_start_flag = 0;
; 
; 
; //void pop_ptr(void)
; //{
; //	#pragma asm
; //		POP 7
; //		POP 6
; //		POP 5
; //		POP 4
; //		POP 3
; //		POP 2
; //		POP 1
; //		POP 0
; //		POP PSW
; //		POP DPH
; //		POP DPL
; //		POP B
; //		POP ACC
; //	#pragma endasm
; //}
; 
; 
; /* 系统开机初始化 */
; void OS_init(void)

	RSEG  ?PR?OS_init?CORE
OS_init:
	USING	0
			; SOURCE LINE # 38
; {
			; SOURCE LINE # 39
; 	current_id = 0;	 		//当前运行任务号为0
			; SOURCE LINE # 40
	MOV  	DPTR,#current_id
	CLR  	A
	MOVX 	@DPTR,A
; 	task_run_flag = 0;		//当前无任务运行
			; SOURCE LINE # 41
	MOV  	DPTR,#task_run_flag
	LCALL	?C?LSTKXDATA
	DB   	00H
	DB   	00H
	DB   	00H
	DB   	00H
; 	task_runtime = 0; 		//当前运行时间为0
			; SOURCE LINE # 42
	MOV  	DPTR,#task_runtime
	LCALL	?C?LSTKXDATA
	DB   	00H
	DB   	00H
	DB   	00H
	DB   	00H
; 	task_start_flag = 0;	//系统未开始运行	
			; SOURCE LINE # 43
	CLR  	task_start_flag
; }
			; SOURCE LINE # 44
	RET  	
; END OF OS_init

; 
; /* 系统开始任务调度 */
; void OS_start(void)

	RSEG  ?PR?OS_start?CORE
OS_start:
	USING	0
			; SOURCE LINE # 47
; {
			; SOURCE LINE # 48
; 	task_pcb_buf[current_id].sp -= NUM_PTR_NOPC;
			; SOURCE LINE # 49
	MOV  	DPTR,#current_id
	MOVX 	A,@DPTR
	MOV  	R7,A
	MOV  	A,R7
	MOV  	B,#09H
	MUL  	AB
	ADD  	A,#LOW (task_pcb_buf+06H)
	MOV  	DPL,A
	CLR  	A
	ADDC 	A,#HIGH (task_pcb_buf+06H)
	MOV  	DPH,A
	MOVX 	A,@DPTR
	ADD  	A,#0F3H
	MOVX 	@DPTR,A
; 
; 	SP = task_pcb_buf[current_id].sp;
			; SOURCE LINE # 51
	MOV  	DPTR,#current_id
	MOVX 	A,@DPTR
	MOV  	R7,A
	MOV  	A,R7
	MOV  	B,#09H
	MUL  	AB
	ADD  	A,#LOW (task_pcb_buf+06H)
	MOV  	DPL,A
	CLR  	A
	ADDC 	A,#HIGH (task_pcb_buf+06H)
	MOV  	DPH,A
	MOVX 	A,@DPTR
	MOV  	R7,A
	MOV  	SP,R7
; 	EA = 1;
			; SOURCE LINE # 52
	SETB 	EA
; }
			; SOURCE LINE # 53
	RET  	
; END OF OS_start

; 
; /* 任务切换，用在定时器里面进行任务的切换 */
; void task_switch(void)

	RSEG  ?PR?task_switch?CORE
task_switch:
	USING	0
			; SOURCE LINE # 56
; {
			; SOURCE LINE # 57
; 	EA= 0;	//任务切换的时候不允许被中断
			; SOURCE LINE # 58
	CLR  	EA
; 	/* 保存寄存器值，寄存器值入栈 */
; //	push_ptr();
; 	/* 把转换之前任务的栈指针保存在数组里面 */
; 	task_pcb_buf[current_id].sp = SP;
			; SOURCE LINE # 62
	MOV  	DPTR,#current_id
	MOVX 	A,@DPTR
	MOV  	R7,A
	MOV  	A,R7
	MOV  	B,#09H
	MUL  	AB
	ADD  	A,#LOW (task_pcb_buf+06H)
	MOV  	DPL,A
	CLR  	A
	ADDC 	A,#HIGH (task_pcb_buf+06H)
	MOV  	DPH,A
	MOV  	A,SP
	MOVX 	@DPTR,A
; //	if(tasks_list
; 
; 	/* 寄存器值出栈，恢复寄存器值 */
; //	pop_ptr();
; 	EA = 1;	//任务切换完成，重新开启中断
			; SOURCE LINE # 67
	SETB 	EA
; }
			; SOURCE LINE # 68
	RET  	
; END OF task_switch

; 
; /* 创建任务 
;  * priority 任务优先级
;  * task_address 任务地址
;  * task_msg 任务消息指针
;  */
; void task_create(unsigned char priority, unsigned int task_address, unsigned char task_msg)

	RSEG  ?PR?_task_create?CORE
_task_create:
	USING	0
			; SOURCE LINE # 75
	MOV  	priority?340,R7
	MOV  	task_address?341,R4
	MOV  	task_address?341+01H,R5
	MOV  	task_msg?342,R3
; {
			; SOURCE LINE # 76
; 	static unsigned char i = 0;
; 	static unsigned char stack_deep = 0;
; 	static unsigned char stack_p;
; 
; 	for(i = 0; i < TASK_MAX; i ++)
			; SOURCE LINE # 81
	MOV  	i?343,#00H
?C0004:
	MOV  	A,i?343
	CLR  	C
	SUBB 	A,#05H
	JC   	$ + 5H
	LJMP 	?C0012
; 	{
			; SOURCE LINE # 82
; 		if(task_run_flag & (1 << i))
			; SOURCE LINE # 83
	MOV  	R7,i?343
	MOV  	A,#01H
	MOV  	R6,#00H
	MOV  	R0,AR7
	INC  	R0
	SJMP 	?C0026
?C0025:
	CLR  	C
	RLC  	A
	XCH  	A,R6
	RLC  	A
	XCH  	A,R6
?C0026:
	DJNZ 	R0,?C0025
	MOV  	R7,A
	MOV  	A,R6
	RLC  	A
	SUBB 	A,ACC
	MOV  	R5,A
	MOV  	R4,A
	MOV  	DPTR,#task_run_flag
	MOVX 	A,@DPTR
	MOV  	R0,A
	INC  	DPTR
	MOVX 	A,@DPTR
	MOV  	R1,A
	INC  	DPTR
	MOVX 	A,@DPTR
	MOV  	R2,A
	INC  	DPTR
	MOVX 	A,@DPTR
	MOV  	R3,A
	MOV  	A,R7
	ANL  	A,R3
	MOV  	R7,A
	MOV  	A,R6
	ANL  	A,R2
	MOV  	R6,A
	MOV  	A,R5
	ANL  	A,R1
	MOV  	R5,A
	MOV  	A,R4
	ANL  	A,R0
	MOV  	R4,A
	MOV  	A,R4
	ORL  	A,R5
	ORL  	A,R6
	ORL  	A,R7
	JZ   	$ + 5H
	LJMP 	?C0006
?C0007:
; 			;
; 		else
; 		{
			; SOURCE LINE # 86
; 			stack_p = (unsigned char)task_sp[i];	//把堆栈指针的地址赋值堆栈地址暂存区
			; SOURCE LINE # 87
	MOV  	R7,i?343
	MOV  	A,R7
	MOV  	B,#014H
	MUL  	AB
	ADD  	A,#LOW (task_sp)
	MOV  	R0,A
	MOV  	R7,AR0
	MOV  	stack_p?345,R7
; 			/* 初始化清空堆栈区 */
; 			for(stack_deep = 0; stack_deep < SP_DEEP; stack_deep ++)
			; SOURCE LINE # 89
	MOV  	stack_deep?344,#00H
?C0009:
	MOV  	A,stack_deep?344
	CLR  	C
	SUBB 	A,#014H
	JNC  	?C0010
; 				((unsigned char idata *)stack_p)[stack_deep] = 0;
			; SOURCE LINE # 90
	MOV  	R7,stack_p?345
	MOV  	R0,AR7
	MOV  	R7,stack_deep?344
	MOV  	A,R0
	ADD  	A,R7
	MOV  	R0,A
	MOV  	@R0,#00H
	INC  	stack_deep?344
	SJMP 	?C0009
?C0010:
; 			
; 			task_pcb_buf[i].sp = stack_p;	//把堆栈指针赋值给任务结构体
			; SOURCE LINE # 92
	MOV  	R7,i?343
	MOV  	A,R7
	MOV  	B,#09H
	MUL  	AB
	ADD  	A,#LOW (task_pcb_buf+06H)
	MOV  	DPL,A
	CLR  	A
	ADDC 	A,#HIGH (task_pcb_buf+06H)
	MOV  	DPH,A
	MOV  	A,stack_p?345
	MOVX 	@DPTR,A
; 			((unsigned char idata *)stack_p)[0] = task_address % 256;	  //把任务地址低8位入栈
			; SOURCE LINE # 93
	MOV  	R6,#00H
	MOV  	R7,task_address?341+01H
	MOV  	R6,stack_p?345
	MOV  	R0,AR6
	MOV  	@R0,AR7
; 			task_pcb_buf[i].sp ++;
			; SOURCE LINE # 94
	MOV  	R7,i?343
	MOV  	A,R7
	MOV  	B,#09H
	MUL  	AB
	ADD  	A,#LOW (task_pcb_buf+06H)
	MOV  	DPL,A
	CLR  	A
	ADDC 	A,#HIGH (task_pcb_buf+06H)
	MOV  	DPH,A
	MOVX 	A,@DPTR
	INC  	A
	MOVX 	@DPTR,A
; 			((unsigned char idata *)stack_p)[1] = task_address >> 8;	  //把任务地址高8位入栈
			; SOURCE LINE # 95
	MOV  	A,task_address?341
	MOV  	R7,A
	MOV  	R6,#00H
	MOV  	R6,stack_p?345
	MOV  	R0,AR6
	MOV  	A,R0
	INC  	A
	MOV  	R0,A
	MOV  	@R0,AR7
; 			task_pcb_buf[i].sp += NUM_PTR_NOPC;		//将任务堆栈指针值设为任务切换时的状态
			; SOURCE LINE # 96
	MOV  	R7,i?343
	MOV  	A,R7
	MOV  	B,#09H
	MUL  	AB
	ADD  	A,#LOW (task_pcb_buf+06H)
	MOV  	DPL,A
	CLR  	A
	ADDC 	A,#HIGH (task_pcb_buf+06H)
	MOV  	DPH,A
	MOVX 	A,@DPTR
	ADD  	A,#0DH
	MOVX 	@DPTR,A
; 			
; 			task_run_flag |= (1 << i);		//把此位设置为有任务
			; SOURCE LINE # 98
	MOV  	DPTR,#task_run_flag
	MOVX 	A,@DPTR
	MOV  	R4,A
	INC  	DPTR
	MOVX 	A,@DPTR
	MOV  	R5,A
	INC  	DPTR
	MOVX 	A,@DPTR
	MOV  	R6,A
	INC  	DPTR
	MOVX 	A,@DPTR
	MOV  	R7,A
	PUSH 	AR4
	PUSH 	AR5
	PUSH 	AR6
	PUSH 	AR7
	MOV  	R7,i?343
	MOV  	A,#01H
	MOV  	R6,#00H
	MOV  	R0,AR7
	INC  	R0
	SJMP 	?C0028
?C0027:
	CLR  	C
	RLC  	A
	XCH  	A,R6
	RLC  	A
	XCH  	A,R6
?C0028:
	DJNZ 	R0,?C0027
	MOV  	R7,A
	MOV  	R3,AR7
	MOV  	R2,AR6
	MOV  	A,R2
	RLC  	A
	SUBB 	A,ACC
	MOV  	R1,A
	MOV  	R0,A
	POP  	AR7
	POP  	AR6
	POP  	AR5
	POP  	AR4
	MOV  	A,R7
	ORL  	A,R3
	MOV  	R7,A
	MOV  	A,R6
	ORL  	A,R2
	MOV  	R6,A
	MOV  	A,R5
	ORL  	A,R1
	MOV  	R5,A
	MOV  	A,R4
	ORL  	A,R0
	MOV  	R4,A
	MOV  	DPTR,#task_run_flag
	LCALL	?C?LSTXDATA
	RET  	
; 			
; 			return;	//任务创建成功，返回
; 		}
			; SOURCE LINE # 101
; 	}
			; SOURCE LINE # 102
?C0006:
	INC  	i?343
	LJMP 	?C0004
; }
			; SOURCE LINE # 103
?C0012:
	RET  	
; END OF _task_create

CSEG	AT	0001BH
	LJMP	timer1_task_switch

; 
; 
; /* 中断服务函数，用定时器1进行任务调度 */
; void timer1_task_switch(void) interrupt 3

	RSEG  ?PR?timer1_task_switch?CORE
	USING	0
timer1_task_switch:
	PUSH 	ACC
	PUSH 	B
	PUSH 	DPH
	PUSH 	DPL
	PUSH 	PSW
	MOV  	PSW,#00H
	PUSH 	AR0
	PUSH 	AR1
	PUSH 	AR2
	PUSH 	AR3
	PUSH 	AR4
	PUSH 	AR5
	PUSH 	AR6
	PUSH 	AR7
	USING	0
			; SOURCE LINE # 107
; {
; 	unsigned char temp = 0;
			; SOURCE LINE # 109
	MOV  	temp?446,#00H
; 	
; 	EA = 0;	//任务切换的时候要关闭中断
			; SOURCE LINE # 111
	CLR  	EA
; 
; //	if(!task_start_flag)	//第一次进入中断
; //	{
; ////		SP = SP - NUM_PTR_NOPC;	//此时指针指向调用此中断时候压入的PC低地址
; ////		for(temp = 1; temp < NUM_PTR_NOPC + 1; temp ++)
; ////		{
; ////			((unsigned char idata *)SP)[temp] = ((unsigned char idata *)SP)[temp + 2];	//将除了PC之外的寄存器值往下平移两位
; ////		}
; ////		SP = SP + NUM_PTR_NOPC;
; //		task_start_flag = 1; //设置系统运行标志，此时为已经运行
; //	}
; 
; 	/* 保存寄存器值，寄存器值入栈 */
; //	push_ptr();	 /* 在现有编译环境下寄存器已经由系统自动保存了 */
; 	
; 	TF1 = 0;	//清除中断标志
			; SOURCE LINE # 127
	CLR  	TF1
; 	
; 	/* 把转换之前任务的栈指针保存在其任务结构体里面 */
; 	task_pcb_buf[current_id].sp = SP;
			; SOURCE LINE # 130
	MOV  	DPTR,#current_id
	MOVX 	A,@DPTR
	MOV  	R7,A
	MOV  	A,R7
	MOV  	B,#09H
	MUL  	AB
	ADD  	A,#LOW (task_pcb_buf+06H)
	MOV  	DPL,A
	CLR  	A
	ADDC 	A,#HIGH (task_pcb_buf+06H)
	MOV  	DPH,A
	MOV  	A,SP
	MOVX 	@DPTR,A
; 
; 	/* 第一版，任务轮流被调用，查找本次任务之后的任务，有的话直接跳到 T2_switch_exit 处执行*/
; 	for(temp = current_id + 1; temp < TASK_MAX; temp ++)
			; SOURCE LINE # 133
	MOV  	DPTR,#current_id
	MOVX 	A,@DPTR
	MOV  	R7,A
	MOV  	A,R7
	INC  	A
	MOV  	temp?446,A
?C0013:
	MOV  	A,temp?446
	CLR  	C
	SUBB 	A,#05H
	JNC  	?C0014
; 	{
			; SOURCE LINE # 134
; 		if(task_run_flag & (1 << temp))
			; SOURCE LINE # 135
	MOV  	R7,temp?446
	MOV  	A,#01H
	MOV  	R6,#00H
	MOV  	R0,AR7
	INC  	R0
	SJMP 	?C0030
?C0029:
	CLR  	C
	RLC  	A
	XCH  	A,R6
	RLC  	A
	XCH  	A,R6
?C0030:
	DJNZ 	R0,?C0029
	MOV  	R7,A
	MOV  	A,R6
	RLC  	A
	SUBB 	A,ACC
	MOV  	R5,A
	MOV  	R4,A
	MOV  	DPTR,#task_run_flag
	MOVX 	A,@DPTR
	MOV  	R0,A
	INC  	DPTR
	MOVX 	A,@DPTR
	MOV  	R1,A
	INC  	DPTR
	MOVX 	A,@DPTR
	MOV  	R2,A
	INC  	DPTR
	MOVX 	A,@DPTR
	MOV  	R3,A
	MOV  	A,R7
	ANL  	A,R3
	MOV  	R7,A
	MOV  	A,R6
	ANL  	A,R2
	MOV  	R6,A
	MOV  	A,R5
	ANL  	A,R1
	MOV  	R5,A
	MOV  	A,R4
	ANL  	A,R0
	MOV  	R4,A
	MOV  	A,R4
	ORL  	A,R5
	ORL  	A,R6
	ORL  	A,R7
	JZ   	?C0015
; 		{
			; SOURCE LINE # 136
; 			current_id = temp;
			; SOURCE LINE # 137
	MOV  	DPTR,#current_id
	MOV  	A,temp?446
	MOVX 	@DPTR,A
; 			goto T2_switch_exit;			
			; SOURCE LINE # 138
	SJMP 	?timer1_task_switch?T2_switch_exit
; 		}
			; SOURCE LINE # 139
; 	}
			; SOURCE LINE # 140
?C0015:
	INC  	temp?446
	SJMP 	?C0013
?C0014:
; 
; 	/* 没有找到正在运行任务之后的任务，返回前面进行查找 */
; 	for(temp = 0; temp < current_id + 1; temp ++)
			; SOURCE LINE # 143
	MOV  	temp?446,#00H
?C0018:
	MOV  	DPTR,#current_id
	MOVX 	A,@DPTR
	MOV  	R7,A
	MOV  	R6,#00H
	MOV  	A,R7
	ADD  	A,#01H
	MOV  	R7,A
	MOV  	A,R6
	ADDC 	A,#00H
	MOV  	R6,A
	MOV  	R5,temp?446
	MOV  	R4,#00H
	CLR  	C
	MOV  	A,R5
	SUBB 	A,R7
	MOV  	A,R6
	XRL  	A,#080H
	MOV  	R0,A
	MOV  	A,R4
	XRL  	A,#080H
	SUBB 	A,R0
	JNC  	?timer1_task_switch?T2_switch_exit
; 	{
			; SOURCE LINE # 144
; 		if(task_run_flag & (1 << temp))
			; SOURCE LINE # 145
	MOV  	R7,temp?446
	MOV  	A,#01H
	MOV  	R6,#00H
	MOV  	R0,AR7
	INC  	R0
	SJMP 	?C0032
?C0031:
	CLR  	C
	RLC  	A
	XCH  	A,R6
	RLC  	A
	XCH  	A,R6
?C0032:
	DJNZ 	R0,?C0031
	MOV  	R7,A
	MOV  	A,R6
	RLC  	A
	SUBB 	A,ACC
	MOV  	R5,A
	MOV  	R4,A
	MOV  	DPTR,#task_run_flag
	MOVX 	A,@DPTR
	MOV  	R0,A
	INC  	DPTR
	MOVX 	A,@DPTR
	MOV  	R1,A
	INC  	DPTR
	MOVX 	A,@DPTR
	MOV  	R2,A
	INC  	DPTR
	MOVX 	A,@DPTR
	MOV  	R3,A
	MOV  	A,R7
	ANL  	A,R3
	MOV  	R7,A
	MOV  	A,R6
	ANL  	A,R2
	MOV  	R6,A
	MOV  	A,R5
	ANL  	A,R1
	MOV  	R5,A
	MOV  	A,R4
	ANL  	A,R0
	MOV  	R4,A
	MOV  	A,R4
	ORL  	A,R5
	ORL  	A,R6
	ORL  	A,R7
	JZ   	?timer1_task_switch?T2_switch_exit
; 		{
			; SOURCE LINE # 146
; 			current_id = temp;
			; SOURCE LINE # 147
	MOV  	DPTR,#current_id
	MOV  	A,temp?446
	MOVX 	@DPTR,A
; 			goto T2_switch_exit;	
			; SOURCE LINE # 148
	SJMP 	?timer1_task_switch?T2_switch_exit
; 		}
			; SOURCE LINE # 149
; 		else
; 			goto T2_switch_exit;
			; SOURCE LINE # 151
; 	}
			; SOURCE LINE # 152
?C0020:
	INC  	temp?446
	SJMP 	?C0018
; 
; T2_switch_exit:
			; SOURCE LINE # 154
?timer1_task_switch?T2_switch_exit:
; 	SP = task_pcb_buf[current_id].sp;	//把要运行的任务SP地址传入SP寄存器
			; SOURCE LINE # 155
	MOV  	DPTR,#current_id
	MOVX 	A,@DPTR
	MOV  	R7,A
	MOV  	A,R7
	MOV  	B,#09H
	MUL  	AB
	ADD  	A,#LOW (task_pcb_buf+06H)
	MOV  	DPL,A
	CLR  	A
	ADDC 	A,#HIGH (task_pcb_buf+06H)
	MOV  	DPH,A
	MOVX 	A,@DPTR
	MOV  	R7,A
	MOV  	SP,R7
; 
; 	task_runtime ++;	//系统运行时间加1
			; SOURCE LINE # 157
	MOV  	DPTR,#task_runtime
	MOVX 	A,@DPTR
	MOV  	R4,A
	INC  	DPTR
	MOVX 	A,@DPTR
	MOV  	R5,A
	INC  	DPTR
	MOVX 	A,@DPTR
	MOV  	R6,A
	INC  	DPTR
	MOVX 	A,@DPTR
	MOV  	R7,A
	MOV  	R3,#01H
	MOV  	R2,#00H
	MOV  	R1,#00H
	MOV  	R0,#00H
	MOV  	A,R7
	ADD  	A,R3
	MOV  	R7,A
	MOV  	A,R6
	ADDC 	A,R2
	MOV  	R6,A
	MOV  	A,R5
	ADDC 	A,R1
	MOV  	R5,A
	MOV  	A,R4
	ADDC 	A,R0
	MOV  	R4,A
	MOV  	DPTR,#task_runtime
	LCALL	?C?LSTXDATA
; 	/* 寄存器值出栈，恢复寄存器值 */
; //	pop_ptr();
; 	EA = 1;	//任务切换完成，重新开启中断
			; SOURCE LINE # 160
	SETB 	EA
; }
			; SOURCE LINE # 161
	POP  	AR7
	POP  	AR6
	POP  	AR5
	POP  	AR4
	POP  	AR3
	POP  	AR2
	POP  	AR1
	POP  	AR0
	POP  	PSW
	POP  	DPL
	POP  	DPH
	POP  	B
	POP  	ACC
	RETI 	
; END OF timer1_task_switch

; 
; /* 堆栈的测试 */
; void sp_test(void)

	RSEG  ?PR?sp_test?CORE
sp_test:
	USING	0
			; SOURCE LINE # 164
; {
			; SOURCE LINE # 165
; 	SP = task_sp;
			; SOURCE LINE # 166
	MOV  	R3,#00H
	MOV  	R2,#HIGH (task_sp)
	MOV  	R1,#LOW (task_sp)
	MOV  	R7,AR1
	MOV  	SP,R7
; 
; }
			; SOURCE LINE # 168
	RET  	
; END OF sp_test

	END
