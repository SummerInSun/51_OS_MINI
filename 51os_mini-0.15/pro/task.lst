C51 COMPILER V9.02   TASK                                                                  03/26/2016 10:40:27 PAGE 1   


C51 COMPILER V9.02, COMPILATION OF MODULE TASK
OBJECT MODULE PLACED IN .\task.obj
COMPILER INVOKED BY: D:\msprograms\keil4\C51\BIN\C51.EXE ..\src\task.c OPTIMIZE(2,SPEED) BROWSE INCDIR(../head;../board/
                    -head) DEBUG OBJECTEXTEND PRINT(.\task.lst) OBJECT(.\task.obj)

line level    source

   1          #include "task.h"
   2          
   3          /* 命令解释字段 */
   4          code unsigned char cmd_buff[][100] = {
   5                  "1.ps:\tdisplay the running tasks\r\n",
   6                  "2.kill:\tkill the task you have selected\r\n\texample:\r\n\t\tkill 4 ---kill the 4th task\r\n",
   7                  "3.new:\tcreate a task\r\n\texample:\r\n\t\tnew task2 ---create the task named 'task2'\r\n",
   8                  "4.exit:\texit all this system\r\n",
   9                  "\0"
  10          };
  11          
  12          /* 任务字串解析标志,解析完成标志置0,正在解析标志置1 */
  13          xdata unsigned char parse_commond_flag = 0;
  14          
  15          /* 等待命令解析 */
  16          static void wait_parse(void)
  17          {
  18   1              parse_commond_flag = 1;
  19   1      
  20   1              while(parse_commond_flag)
  21   1              {
  22   2                      task_delay(2);  //阻塞，等待一个周期再来查询命令是否解析完毕
  23   2              }
  24   1      
  25   1      }
  26          
  27          /* 所有的消息处理模块 */
  28          //'ps'
  29          static void ps_msghandler(void *msg)
  30          {
  31   1              xdata unsigned char i = 0;
  32   1              xdata unsigned char mod = 0;
  33   1      
  34   1      /* 打印出来运行的任务概要 */
  35   1              printf("There are \"");
  36   1              uart_send_byte(task_running + 48);
  37   1              printf("\" tasks are running.");
  38   1      /* 打印CPU从开机到现在运行的时间 */
  39   1              printf("\t Cpu has run \"");
  40   1              putchar(task_runtime / 10000000000+ 48);
  41   1              putchar(task_runtime % 1000000000 / 1000000000 + 48);
  42   1              putchar(task_runtime % 100000000 / 10000000 + 48);
  43   1              putchar(task_runtime % 10000000 / 1000000 + 48);
  44   1              putchar(task_runtime % 1000000 / 100000 + 48);
  45   1              putchar(task_runtime % 100000 / 10000 + 48);
  46   1              putchar(task_runtime % 10000 / 1000 + 48);
  47   1              putchar(task_runtime % 1000 / 100 + 48);
  48   1              putchar(task_runtime % 100 / 10 + 48);
  49   1              putchar(task_runtime % 10 + 48);
  50   1              printf("\" times\r\n");
  51   1              uart_send_str("pid\tpriority\tcpu_use\tname\r\n\r\n");
  52   1      /* 遍历查询正在运行的任务并打印出运行详细情况来 */
  53   1              for(i = 0; i < TASK_MAX; i ++)
  54   1              {
C51 COMPILER V9.02   TASK                                                                  03/26/2016 10:40:27 PAGE 2   

  55   2                      if(task_run_flag & (1 << i))
  56   2                      {
  57   3                              mod = (task_pcb_buf[i].run_time) * 100 / task_runtime;
  58   3                              putchar(i + 48);
  59   3                              putchar('\t');
  60   3                              putchar(task_pcb_buf[i].priority / 100 + 48);
  61   3                              putchar(task_pcb_buf[i].priority % 100 / 10 + 48);
  62   3                              putchar(task_pcb_buf[i].priority % 10 + 48);
  63   3                              printf("\t\t");
  64   3                              putchar(mod / 10 + 48);
  65   3                              putchar(mod % 10 + 48);
  66   3                              putchar('\t');
  67   3                              printf(task_pcb_buf[i].id);
  68   3                              uart_send_str("\r\n");
  69   3                      }
  70   2              }
  71   1      
  72   1      //      uart_send_str("You do a 'test' commond\r\n");
  73   1      }
*** WARNING C280 IN LINE 29 OF ..\SRC\TASK.C: 'msg': unreferenced local variable
  74          //'kill 'pid''
  75          static void kill_msghandler(void *msg)
  76          {               
  77   1              if(cmd_split[1][0] != '2' && cmd_split[1][0] != '3' && cmd_split[1][0] != '0')
  78   1              {
  79   2                      if(task_kill(cmd_split[1][0] - 48))
  80   2                      {
  81   3                              printf("The task don't exit\r\n");
  82   3                      }
  83   2                      else
  84   2                      {
  85   3                              uart_send_str("The task has been killed : pidnum = ");
  86   3                              uart_send_byte(cmd_split[1][0]);
  87   3                              uart_send_str("\r\n");
  88   3                      }
  89   2              }
  90   1              else
  91   1              {
  92   2                      uart_send_str("The task you select can't be killed\r\n");
  93   2              }
  94   1      }
*** WARNING C280 IN LINE 75 OF ..\SRC\TASK.C: 'msg': unreferenced local variable
  95          //'new 'pid''
  96          static void new_msghandler(void *msg)
  97          {       
  98   1              xdata unsigned char i;
  99   1              
 100   1              for(i = 0; i < TASK_MAX; i ++)
 101   1              {
 102   2                      if(task_run_flag & (1 << i))
 103   2                      {
 104   3                              if(!os_strcmp(cmd_split[1], task_pcb_buf[i].id))
 105   3                              {
 106   4                                      printf("The task has been exist\r\n");
 107   4                                      return;
 108   4                              }
 109   3                      }
 110   2              }
 111   1              
 112   1              if(!os_strcmp("task1", cmd_split[1]))
 113   1              {
 114   2                      CREATE_TASK_RUNNING(2, task1, "task1");
C51 COMPILER V9.02   TASK                                                                  03/26/2016 10:40:27 PAGE 3   

 115   2                      printf("The task has been created : task name = ");
 116   2                      printf(cmd_split[1]);
 117   2                      printf("\r\n");
 118   2              }
 119   1              else if(!os_strcmp("idle", cmd_split[1]))
 120   1              {
 121   2                      CREATE_TASK_RUNNING(4, idle, "idle");
 122   2                      printf("The task has been created : task name = ");
 123   2                      printf(cmd_split[1]);
 124   2                      printf("\r\n");
 125   2              }
 126   1              else if(!os_strcmp("task2", cmd_split[1]))
 127   1              {
 128   2                      CREATE_TASK_RUNNING(3, task2, "task2");
 129   2                      uart_send_str("The task has been created : task name = ");
 130   2                      uart_send_str(cmd_split[1]);
 131   2                      uart_send_str("\r\n");
 132   2              }
 133   1              else
 134   1              {
 135   2                      uart_send_str("The task you select can't be created\r\n");
 136   2              }
 137   1      }
*** WARNING C280 IN LINE 96 OF ..\SRC\TASK.C: 'msg': unreferenced local variable
 138          
 139          /* 'help' ：获取帮助文件 */
 140          static void help_msghandler(void *msg)
 141          {
 142   1              unsigned char i = 0, j = 0;
 143   1      
 144   1              ENTER_CRITICAL;
 145   1              while(cmd_buff[i][0])
 146   1              {
 147   2                      while(cmd_buff[i][j] != '\0')
 148   2                      {
 149   3                              putchar(cmd_buff[i][j]);
 150   3                              j ++;
 151   3                      }
 152   2                      i ++;
 153   2                      j = 0;
 154   2              }
 155   1              EXIT_CRITICAL;
 156   1      }
*** WARNING C280 IN LINE 140 OF ..\SRC\TASK.C: 'msg': unreferenced local variable
 157          
 158          /* 'exit' ：退出整个系统 */
 159          static void exit_msghandler(void *msg)
 160          {
 161   1              EA = 0; //置零总中断寄存器，关闭整个系统,使单片机进入掉电模式更好
 162   1              TR1 = 0;
 163   1              ET1 = 0;
 164   1              while(1);
 165   1      }
*** WARNING C280 IN LINE 159 OF ..\SRC\TASK.C: 'msg': unreferenced local variable
 166          
 167          void task1(void)
 168          {
 169   1              ENLED = 0;
 170   1              P2 = 0x06;
 171   1      
 172   1              while(1)
 173   1              {
C51 COMPILER V9.02   TASK                                                                  03/26/2016 10:40:27 PAGE 4   

 174   2                      P07 = ~P07;                     
 175   2                      OS_delay(100);
 176   2              }               
 177   1      }
 178          
 179          void idle(void)
 180          {
 181   1              
 182   1              while(1)
 183   1              {
 184   2      
 185   2              }
 186   1      }
 187          
 188          void task2(void)
 189          {
 190   1              ENLED = 0;
 191   1              P2 = 0x06;
 192   1              
 193   1              while(1)
 194   1              {
 195   2                      P06 = ~P06;
 196   2                      OS_delay(50);
 197   2              }
 198   1      }
 199          
 200          /* 串口接收字符串进行回显，并把字符串放入一个缓冲区，之后发送命令消息给消息处理函数并解析执行 */
 201          void task_tty0(void)
 202          {
 203   1              static xdata unsigned int reve_buf_len = 0;     //初始化串口接收到的数据串长度为0
 204   1      
 205   1              printf("#");    //开机打印出提示符
 206   1      
 207   1              while(1)
 208   1              {
 209   2                      while(1)
 210   2                      {                               
 211   3                              reve_buff[reve_buf_len] = uart_reve_byte();     //接收到一个字符并存取到接收缓冲区里面
 212   3                              if(reve_buff[reve_buf_len] == 0)                        //如果没有接收到字串，继续查询
 213   3                              {
 214   4                                      task_delay(2);                                                  //延时两个任务周期，以便其他任务继续执行
 215   4                                      TF1 = 1;        //立马产生一个中断
 216   4                              }
 217   3                              else
 218   3                                      break;
 219   3                      }
 220   2      
 221   2                      if(reve_buf_len >= 254)
 222   2                      {
 223   3                              
 224   3                              printf("\r\nToo much words\r\n");               //用户输入的字符数量过多
 225   3                              printf("Please input your commond again and dont't more than 254\r\n#");                
 226   3      //                      clear_char_str(reve_buff, 256);         //清除整个数组，其实清除不清除并不影响，此处暂且注释掉
 227   3                              reve_buf_len = 0;
 228   3                      }       
 229   2                      else
 230   2                      {
 231   3                              if(reve_buff[reve_buf_len] == '\b')
 232   3                              {
 233   4                                      if(reve_buf_len > 0)
 234   4                                      {
 235   5                                              reve_buf_len --;
C51 COMPILER V9.02   TASK                                                                  03/26/2016 10:40:27 PAGE 5   

 236   5                                              printf("\b \b");
 237   5                                      }
 238   4                              }
 239   3                              else if(reve_buff[reve_buf_len] == '\r')                //接收到换行符
 240   3                              {
 241   4                                      reve_buff[reve_buf_len] = '\0';         //将当前的换行字符替换为字符串结束符用来比较
 242   4                                      DESUSPEND_TASK(TASK_MSGHANDLER);        //消息处理函数解挂起
 243   4                                      wait_parse();                                           //等待命令解析完成
 244   4      //                              clear_char_str(reve_buff, 256);         //清除整个数组，其实清除不清除并不影响，此处暂且注释掉
 245   4                                      reve_buf_len = 0;                                       //字串的索引置0以便重新接受输入
 246   4                              }
 247   3                              else
 248   3                              {
 249   4                                      uart_send_byte(reve_buff[reve_buf_len]);        //将刚刚接收到的一个字节并且发送给串口软件显示
 250   4                                      reve_buf_len ++;                                                        //字串索引值加1
 251   4                              }
 252   3                              
 253   3                      }
 254   2              }       
 255   1      }
 256          
 257          /* 消息处理函数，对串口接收到的命令进行相应的处理 */
 258          void task_msghandler(void)
 259          {       
 260   1              while(1)
 261   1              {               
 262   2                      uart_send_str("\r\n");
 263   2                      
 264   2                      split_str(reve_buff, cmd_split);
 265   2                      
 266   2                      if(!os_strcmp("kill", cmd_split[0]))
 267   2                      {
 268   3                              kill_msghandler(0);
 269   3                      }
 270   2                      else if(!os_strcmp("new", cmd_split[0]))
 271   2                      {
 272   3                              new_msghandler(0);
 273   3                      }
 274   2                      else if(!os_strcmp("ps", cmd_split[0]))
 275   2                      {
 276   3                              ps_msghandler(0);
 277   3                      }
 278   2                      else if(!os_strcmp("help", cmd_split[0]))
 279   2                      {
 280   3                              help_msghandler(0);
 281   3                      }
 282   2                      else if(!os_strcmp("exit", cmd_split[0]))
 283   2                      {
 284   3                              exit_msghandler(0);
 285   3                      }
 286   2                      else if(os_strcmp("", cmd_split[0]))
 287   2                      {
 288   3                              uart_send_str(cmd_split[0]);
 289   3                              uart_send_str(": undefined commond\r\n");
 290   3                      }
 291   2                                      
 292   2                      uart_send_str("#");     //发送提示符
 293   2                      parse_commond_flag = 0; //任务解析完毕
 294   2                      SUSPEND_TASK(TASK_MSGHANDLER);  //自挂起，应该先挂起再等待
 295   2                      TF1 = 1;                        //立刻产生一个中断，避免多次执行到任务  
 296   2              }
 297   1      }
C51 COMPILER V9.02   TASK                                                                  03/26/2016 10:40:27 PAGE 6   

 298          
 299          //void timer0_irq(void) interrupt 1
 300          //{
 301          //      lq_disp(0x123456);
 302          //}


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   2349    ----
   CONSTANT SIZE    =    945    ----
   XDATA SIZE       =      3       3
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----      17
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  5 WARNING(S),  0 ERROR(S)
